context: Controller
inv:self.GWTImporter -> size() = 1
    self.BackgroundImporter -> size() = 1
    self.RUCMGenerator -> size() = 1
context: Controller::importGWT(f:InputFile)
pre: f<>null
post: DataDispatcher.GWT -> size() >= (DataDispatcher.GWT -> size())@pre
context: Controller::importBackground(f:InputFile)
pre: f<>null
post: DataDispatcher.Background -> size() >= (DataDispatcher.Background -> size())@pre
context: Controller::outputResult(f:OutputFile)
pre: f<>null
post: 
context: BackgroundImporter
inv:self.InputFile <> null
    self.Background <> null
context: BackgroundImporter::importBackground()
pre:DataDispatcher -> size() = 1
    Background <> null
post:DataDispatcher.Background -> size() >= (DataDispatcher.Background -> size())@pre
context: RUCMGenerator
inv:self.LableGenerator -> size() = 1
    self.NLPExecutor -> size() = 1
    self.GWTs->notEmpty()=true
    self.GWTs->forAll(gwt:GWTs|gwt.oclIsTypeOf(GWT)=true)
    if self.RUCMs->notEmpty() 
    then self.RUCMs->forAll(gwt:GWTs|gwt.oclIsTypeOf(GWT)=true)
    endif
context: RUCMGenerator::generateRUCMs()
pre:LableGenerator -> size() = 1
    NLPExecutor -> size() = 1
    GWTs->notEmpty()=true
    GWTs->forAll(gwt:GWTs|gwt.oclIsTypeOf(GWT)=true)
post:RUCMs->notEmpty()=true
    outputFile <> null
context: LableGenerator
inv:self.NLPExecutor->size() = 1
context: LableGenerator::generateLables(gwt:GWT)
pre:NLPExecutor->size() = 1
post:TaggedGWT->size() >= (TaggedGWT->size())@pre
context: NLPExecutor
inv: